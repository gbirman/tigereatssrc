{"ast":null,"code":"import _classCallCheck from \"/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/src/components/ExpansionModule.js\";\nimport React from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Chip from '@material-ui/core/Chip';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Grid from '@material-ui/core/Grid';\nimport axios from 'axios'; // ON QUERY, SEND BACK LIST OF PARAMS FOR EACH FIELD THAT CAN BE INCLUDED, AS OPPOSED THAT CANT BE\n\nvar ExpansionModule =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ExpansionModule, _React$Component);\n\n  function ExpansionModule() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ExpansionModule);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ExpansionModule)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      options: [],\n      queryParams: [],\n      clickedChips: [],\n      label: undefined\n    };\n\n    _this.handleChipClick = function (option, criteria) {\n      var index = _this.state.options.indexOf(option);\n\n      var newBools = _this.state.clickedChips.slice();\n\n      newBools[index] = !_this.state.clickedChips[index];\n\n      _this.setState(function () {\n        return {\n          clickedChips: newBools\n        };\n      });\n\n      _this.props.onFilter(criteria, option);\n    };\n\n    return _this;\n  }\n\n  _createClass(ExpansionModule, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var ops = [];\n      var label; // take the prop giving the criteria, query the db for all the unique values of that variable, \n      // and put them in a sorted array\n\n      if (this.props.criteria === 'gender') {\n        ops = ['M', 'F'];\n        label = \"Gender\";\n        /* ops = axios.get(\n            '/api/get_user_gender',\n            {\n                userId: 'gender'\n            },\n            {\n                headers: {'Content-type': 'application/json'}\n            }\n        ).then((response) => {console.log(response)}).catch((response) => {console.log(response)}); */\n      } else if (this.props.criteria === 'team') {\n        ops = ['soccer', 'Little League Basketball, Third String'];\n        label = \"Team\";\n        /*ops = axios.get(\n            '/api/get_user_team',\n            {\n                userId: 'team'\n            },\n            {\n                headers: {'Content-type': 'application/json'}\n            }\n        ).then((response) => {console.log(response)}).catch((response) => {console.log(response)}); */\n      } else if (this.props.criteria === 'class_year') {\n        ops = [2019, 2020, 2021, 2022];\n        label = \"Class Year\";\n        /*ops = axios.get(\n            '/api/get_user_year',\n            {\n                userId: 'year'\n            },\n            {\n                headers: {'Content-type': 'application/json'}\n            }\n        ).then((response) => {console.log(response)}).catch((response) => {console.log(response)}); */\n      } // set clicked array\n\n\n      var bools = [];\n      var op;\n\n      for (op in ops) {\n        bools.push(true);\n      }\n\n      this.setState(function () {\n        return {\n          options: ops,\n          queryParams: ops,\n          clickedChips: bools\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(ExpansionPanel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(ExpansionPanelSummary, {\n        expandIcon: React.createElement(ExpandMoreIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, this.props.criteria), React.createElement(ExpansionPanelDetails, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, this.state.options.map(function (option) {\n        var index = _this2.state.options.indexOf(option);\n\n        var clicked = _this2.state.clickedChips[index];\n        return React.createElement(Chip, {\n          label: option,\n          criteria: _this2.props.criteria,\n          icon: clicked ? React.createElement(DoneIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107\n            },\n            __self: this\n          }) : React.createElement(CloseIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107\n            },\n            __self: this\n          }),\n          clickable: true,\n          onClick: function onClick(e) {\n            _this2.handleChipClick(option, _this2.props.criteria);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        });\n      }))));\n    }\n  }]);\n\n  return ExpansionModule;\n}(React.Component);\n\nexport { ExpansionModule as default };","map":{"version":3,"sources":["/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/src/components/ExpansionModule.js"],"names":["React","ExpansionPanel","ExpansionPanelSummary","ExpansionPanelDetails","Chip","ExpandMoreIcon","DoneIcon","CloseIcon","Grid","axios","ExpansionModule","state","options","queryParams","clickedChips","label","undefined","handleChipClick","option","criteria","index","indexOf","newBools","slice","setState","props","onFilter","ops","bools","op","push","map","clicked","e","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,qBAAP,MAAkC,yCAAlC;AACA,OAAOC,qBAAP,MAAkC,yCAAlC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;IAGqBC,e;;;;;;;;;;;;;;;;;UACjBC,K,GAAQ;AACJC,MAAAA,OAAO,EAAE,EADL;AAEJC,MAAAA,WAAW,EAAE,EAFT;AAGJC,MAAAA,YAAY,EAAE,EAHV;AAIJC,MAAAA,KAAK,EAAEC;AAJH,K;;UAiERC,e,GAAkB,UAACC,MAAD,EAASC,QAAT,EAAsB;AACpC,UAAMC,KAAK,GAAG,MAAKT,KAAL,CAAWC,OAAX,CAAmBS,OAAnB,CAA2BH,MAA3B,CAAd;;AAEA,UAAMI,QAAQ,GAAG,MAAKX,KAAL,CAAWG,YAAX,CAAwBS,KAAxB,EAAjB;;AACAD,MAAAA,QAAQ,CAACF,KAAD,CAAR,GAAkB,CAAC,MAAKT,KAAL,CAAWG,YAAX,CAAwBM,KAAxB,CAAnB;;AAEA,YAAKI,QAAL,CAAc;AAAA,eAAO;AACjBV,UAAAA,YAAY,EAAEQ;AADG,SAAP;AAAA,OAAd;;AAIA,YAAKG,KAAL,CAAWC,QAAX,CAAoBP,QAApB,EAA8BD,MAA9B;AACH,K;;;;;;;wCArEmB;AAChB,UAAIS,GAAG,GAAG,EAAV;AACA,UAAIZ,KAAJ,CAFgB,CAIhB;AACA;;AACA,UAAI,KAAKU,KAAL,CAAWN,QAAX,KAAwB,QAA5B,EAAsC;AAClCQ,QAAAA,GAAG,GAAG,CAAC,GAAD,EAAM,GAAN,CAAN;AACAZ,QAAAA,KAAK,GAAG,QAAR;AACA;;;;;;;;;AASH,OAZD,MAaK,IAAI,KAAKU,KAAL,CAAWN,QAAX,KAAwB,MAA5B,EAAoC;AACrCQ,QAAAA,GAAG,GAAG,CAAC,QAAD,EAAW,wCAAX,CAAN;AACAZ,QAAAA,KAAK,GAAG,MAAR;AACA;;;;;;;;;AASH,OAZI,MAaA,IAAI,KAAKU,KAAL,CAAWN,QAAX,KAAwB,YAA5B,EAA0C;AAC3CQ,QAAAA,GAAG,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAN;AACAZ,QAAAA,KAAK,GAAG,YAAR;AACA;;;;;;;;;AASH,OA5Ce,CA8ChB;;;AACA,UAAIa,KAAK,GAAG,EAAZ;AACA,UAAIC,EAAJ;;AACA,WAAKA,EAAL,IAAWF,GAAX;AAAgBC,QAAAA,KAAK,CAACE,IAAN,CAAW,IAAX;AAAhB;;AAEA,WAAKN,QAAL,CAAc;AAAA,eAAO;AACjBZ,UAAAA,OAAO,EAAEe,GADQ;AAEjBd,UAAAA,WAAW,EAAEc,GAFI;AAGjBb,UAAAA,YAAY,EAAEc;AAHG,SAAP;AAAA,OAAd;AAKH;;;6BAeQ;AAAA;;AAEL,aACI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,qBAAD;AAAuB,QAAA,UAAU,EAAE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKH,KAAL,CAAWN,QADhB,CADJ,EAII,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQ,KAAKR,KAAL,CAAWC,OAAX,CAAmBmB,GAAnB,CAAuB,UAACb,MAAD,EAAY;AAC/B,YAAME,KAAK,GAAG,MAAI,CAACT,KAAL,CAAWC,OAAX,CAAmBS,OAAnB,CAA2BH,MAA3B,CAAd;;AACA,YAAMc,OAAO,GAAG,MAAI,CAACrB,KAAL,CAAWG,YAAX,CAAwBM,KAAxB,CAAhB;AACC,eAAO,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEF,MAAb;AAAqB,UAAA,QAAQ,EAAE,MAAI,CAACO,KAAL,CAAWN,QAA1C;AAAoD,UAAA,IAAI,EAAEa,OAAO,GAAG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,GAAkB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAnF;AAAkG,UAAA,SAAS,MAA3G;AACI,UAAA,OAAO,EAAE,iBAACC,CAAD,EAAO;AAAC,YAAA,MAAI,CAAChB,eAAL,CAAqBC,MAArB,EAA6B,MAAI,CAACO,KAAL,CAAWN,QAAxC;AAAkD,WADvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAER,OALG,CAFR,CADJ,CAJJ,CADJ;AAmBH;;;;EApGwCnB,KAAK,CAACkC,S;;SAA9BxB,e","sourcesContent":["import React from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Chip from '@material-ui/core/Chip';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Grid from '@material-ui/core/Grid';\nimport axios from 'axios';\n\n// ON QUERY, SEND BACK LIST OF PARAMS FOR EACH FIELD THAT CAN BE INCLUDED, AS OPPOSED THAT CANT BE\n\n\nexport default class ExpansionModule extends React.Component {\n    state = {\n        options: [],\n        queryParams: [],\n        clickedChips: [],\n        label: undefined\n    };\n\n    componentDidMount() {\n        let ops = [];\n        let label;\n\n        // take the prop giving the criteria, query the db for all the unique values of that variable, \n        // and put them in a sorted array\n        if (this.props.criteria === 'gender') {\n            ops = ['M', 'F'];\n            label = \"Gender\";\n            /* ops = axios.get(\n                '/api/get_user_gender',\n                {\n                    userId: 'gender'\n                },\n                {\n                    headers: {'Content-type': 'application/json'}\n                }\n            ).then((response) => {console.log(response)}).catch((response) => {console.log(response)}); */\n        }\n        else if (this.props.criteria === 'team') {\n            ops = ['soccer', 'Little League Basketball, Third String'];\n            label = \"Team\";\n            /*ops = axios.get(\n                '/api/get_user_team',\n                {\n                    userId: 'team'\n                },\n                {\n                    headers: {'Content-type': 'application/json'}\n                }\n            ).then((response) => {console.log(response)}).catch((response) => {console.log(response)}); */\n        }\n        else if (this.props.criteria === 'class_year') {\n            ops = [2019, 2020, 2021, 2022];\n            label = \"Class Year\";\n            /*ops = axios.get(\n                '/api/get_user_year',\n                {\n                    userId: 'year'\n                },\n                {\n                    headers: {'Content-type': 'application/json'}\n                }\n            ).then((response) => {console.log(response)}).catch((response) => {console.log(response)}); */\n        }\n\n        // set clicked array\n        let bools = [];\n        let op;\n        for (op in ops) bools.push(true);\n\n        this.setState(() => ({\n            options: ops,\n            queryParams: ops,\n            clickedChips: bools\n        }));\n    }\n\n    handleChipClick = (option, criteria) => {\n        const index = this.state.options.indexOf(option);\n\n        const newBools = this.state.clickedChips.slice();\n        newBools[index] = !this.state.clickedChips[index];\n\n        this.setState(() => ({\n            clickedChips: newBools\n        }))\n\n        this.props.onFilter(criteria, option);\n    };\n\n    render() {\n\n        return (\n            <ExpansionPanel>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                    {this.props.criteria}\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <Grid container>\n                        {\n                            this.state.options.map((option) => {\n                                const index = this.state.options.indexOf(option);\n                                const clicked = this.state.clickedChips[index];\n                                 return <Chip label={option} criteria={this.props.criteria} icon={clicked ? <DoneIcon /> : <CloseIcon />} clickable\n                                            onClick={(e) => {this.handleChipClick(option, this.props.criteria)}} />;\n                        })\n                        }\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>  \n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}