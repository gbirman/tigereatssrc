{"ast":null,"code":"import _classCallCheck from \"/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/src/components/ExpansionModule.js\";\nimport React from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Chip from '@material-ui/core/Chip';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Grid from '@material-ui/core/Grid';\nimport axios from 'axios'; // ON QUERY, SEND BACK LIST OF PARAMS FOR EACH FIELD THAT CAN BE INCLUDED, AS OPPOSED THAT CANT BE\n\nvar ExpansionModule =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ExpansionModule, _React$Component);\n\n  function ExpansionModule() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ExpansionModule);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ExpansionModule)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      options: [],\n      queryParams: [],\n      clickedChips: []\n    };\n\n    _this.handleChipClick = function (option) {\n      console.log(option);\n\n      var index = _this.state.options.indexOf(option);\n\n      console.log(index);\n\n      var newBools = _this.state.clickedChips.slice();\n\n      newBools[index] = !_this.state.clickedChips[index];\n\n      _this.setState(function () {\n        return {\n          clickedChips: newBools\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ExpansionModule, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var ops = []; // take the prop giving the criteria, query the db for all the unique values of that variable, \n      // and put them in a sorted array\n\n      if (this.props.criteria === 'gender') {\n        ops = ['M', 'F'];\n        /* ops = axios.get(\n            '/api/get_user_gender',\n            {\n                userId: 'gender'\n            },\n            {\n                headers: {'Content-type': 'application/json'}\n            }\n        ).then((response) => {console.log(response)}).catch((response) => {console.log(response)}); */\n      } else if (this.props.criteria === 'team') {\n        ops = ['soccer', 'Little League Basketball, Third String'];\n        /*ops = axios.get(\n            '/api/get_user_team',\n            {\n                userId: 'team'\n            },\n            {\n                headers: {'Content-type': 'application/json'}\n            }\n        ).then((response) => {console.log(response)}).catch((response) => {console.log(response)}); */\n      } else if (this.props.criteria === 'class_year') {\n        ops = [2019, 2020, 2021, 2022];\n        /*ops = axios.get(\n            '/api/get_user_year',\n            {\n                userId: 'year'\n            },\n            {\n                headers: {'Content-type': 'application/json'}\n            }\n        ).then((response) => {console.log(response)}).catch((response) => {console.log(response)}); */\n      } // set clicked array\n\n\n      var bools = [];\n      var op;\n\n      for (op in ops) {\n        bools.push(true);\n      }\n\n      this.setState(function () {\n        return {\n          options: ops,\n          queryParams: ops,\n          clickedChips: bools\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(ExpansionPanel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(ExpansionPanelSummary, {\n        expandIcon: React.createElement(ExpandMoreIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.props.criteria), React.createElement(ExpansionPanelDetails, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, this.state.options.map(function (option) {\n        var index = _this2.state.options.indexOf(option);\n\n        var clicked = _this2.state.clickedChips[index];\n        return React.createElement(Chip, {\n          label: option,\n          icon: clicked ? React.createElement(DoneIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }) : React.createElement(CloseIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }),\n          clickable: true,\n          onClick: function onClick(e) {\n            _this2.handleChipClick(option);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        });\n      }))));\n    }\n  }]);\n\n  return ExpansionModule;\n}(React.Component);\n\nexport { ExpansionModule as default };","map":{"version":3,"sources":["/Users/PauloFrazao/Desktop/tiger_eats_alpha_3/src/components/ExpansionModule.js"],"names":["React","ExpansionPanel","ExpansionPanelSummary","ExpansionPanelDetails","Chip","ExpandMoreIcon","DoneIcon","CloseIcon","Grid","axios","ExpansionModule","state","options","queryParams","clickedChips","handleChipClick","option","console","log","index","indexOf","newBools","slice","setState","ops","props","criteria","bools","op","push","map","clicked","e","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Chip from '@material-ui/core/Chip';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Grid from '@material-ui/core/Grid';\nimport axios from 'axios';\n\n// ON QUERY, SEND BACK LIST OF PARAMS FOR EACH FIELD THAT CAN BE INCLUDED, AS OPPOSED THAT CANT BE\n\n\nexport default class ExpansionModule extends React.Component {\n    state = {\n        options: [],\n        queryParams: [],\n        clickedChips: []\n    };\n\n    componentDidMount() {\n        let ops = [];\n\n        // take the prop giving the criteria, query the db for all the unique values of that variable, \n        // and put them in a sorted array\n        if (this.props.criteria === 'gender') {\n            ops = ['M', 'F'];\n            /* ops = axios.get(\n                '/api/get_user_gender',\n                {\n                    userId: 'gender'\n                },\n                {\n                    headers: {'Content-type': 'application/json'}\n                }\n            ).then((response) => {console.log(response)}).catch((response) => {console.log(response)}); */\n        }\n        else if (this.props.criteria === 'team') {\n            ops = ['soccer', 'Little League Basketball, Third String'];\n            /*ops = axios.get(\n                '/api/get_user_team',\n                {\n                    userId: 'team'\n                },\n                {\n                    headers: {'Content-type': 'application/json'}\n                }\n            ).then((response) => {console.log(response)}).catch((response) => {console.log(response)}); */\n        }\n        else if (this.props.criteria === 'class_year') {\n            ops = [2019, 2020, 2021, 2022];\n            /*ops = axios.get(\n                '/api/get_user_year',\n                {\n                    userId: 'year'\n                },\n                {\n                    headers: {'Content-type': 'application/json'}\n                }\n            ).then((response) => {console.log(response)}).catch((response) => {console.log(response)}); */\n        }\n\n        // set clicked array\n        let bools = [];\n        let op;\n        for (op in ops) bools.push(true);\n\n        this.setState(() => ({\n            options: ops,\n            queryParams: ops,\n            clickedChips: bools\n        }));\n    }\n\n    handleChipClick = (option) => {\n        console.log(option);\n\n        const index = this.state.options.indexOf(option);\n        console.log(index);\n\n        const newBools = this.state.clickedChips.slice();\n        newBools[index] = !this.state.clickedChips[index];\n\n        this.setState(() => ({\n            clickedChips: newBools\n        }))\n    };\n\n    render() {\n\n        return (\n            <ExpansionPanel>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                    {this.props.criteria}\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <Grid container>\n                        {\n                            this.state.options.map((option) => {\n                                const index = this.state.options.indexOf(option);\n                                const clicked = this.state.clickedChips[index];\n                                 return <Chip label={option} icon={clicked ? <DoneIcon /> : <CloseIcon />} clickable\n                                            onClick={(e) => {this.handleChipClick(option)}} />;\n                        })\n                        }\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>  \n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}