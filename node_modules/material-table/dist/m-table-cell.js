import _objectSpread from "@babel/runtime/helpers/objectSpread";

/* eslint-disable no-unused-vars */
import * as React from 'react';
import { Icon, TableCell } from '@material-ui/core';
import PropTypes from 'prop-types';
/* eslint-enable no-unused-vars */

export default class MTableCell extends React.Component {
  getRenderValue() {
    if (this.props.columnDef.render) {
      return this.props.columnDef.render(this.props.rowData);
    } else if (this.props.columnDef.type === 'boolean') {
      const style = {
        textAlign: 'center',
        width: '48px'
      };

      if (this.props.value) {
        return React.createElement(Icon, {
          style: style
        }, "check");
      } else {
        return React.createElement(Icon, {
          style: style
        }, "remove");
      }
    } else if (this.props.columnDef.type === 'date') {
      if (this.props.value instanceof Date) {
        return this.props.value.toLocaleDateString();
      } else {
        return this.props.value;
      }
    } else if (this.props.columnDef.type === 'time') {
      if (this.props.value instanceof Date) {
        return this.props.value.toLocaleTimeString();
      } else {
        return this.props.value;
      }
    } else if (this.props.columnDef.type === 'dateTime') {
      if (this.props.value instanceof Date) {
        return this.props.value.toLocaleString();
      } else {
        return this.props.value;
      }
    }

    return this.props.value;
  }

  render() {
    let cellStyle = {};

    if (typeof this.props.columnDef.cellStyle === 'function') {
      cellStyle = _objectSpread({}, cellStyle, this.props.columnDef.cellStyle(this.props.value));
    } else {
      cellStyle = _objectSpread({}, cellStyle, this.props.columnDef.cellStyle);
    }

    return React.createElement(TableCell, {
      style: cellStyle,
      numeric: ['numeric'].indexOf(this.props.columnDef.type) !== -1
    }, this.getRenderValue());
  }

}
MTableCell.defaultProps = {
  columnDef: {},
  value: ''
};
MTableCell.propTypes = {
  columnDef: PropTypes.object.isRequired,
  value: PropTypes.any.isRequired
};